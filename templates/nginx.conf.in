server {
        listen 80;
        server_name ${conf:domainname};
        # All requests to 80 are rewritten to https
        return 301 https://${conf:domainname}$request_uri;
}

server {
        listen 443;
        server_name ${conf:domainname};
        client_max_body_size 30m;
        access_log  /var/log/nginx/${conf:domainname}.access-ssl.log;
        error_log  /var/log/nginx/${conf:domainname}.error-ssl.log;

        ssl on;
        ssl_certificate /etc/ssl/certs/star.zestsoftware.nl.pem;
        ssl_certificate_key /etc/ssl/private/star.zestsoftware.nl.key;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_prefer_server_ciphers on;
        ssl_ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS;
        ssl_session_cache shared:SLL:10m;
        ssl_session_timeout 24h;
        # Set the buffer size to 1400 bytes (that way it fits into a single MTU).
        ssl_buffer_size 1400;

        # Enable stapling When connecting to a server, clients should verify the
        # validity of the server certificate using either a Certificate Revocation
        # List (CRL), or an Online Certificate Status Protocol (OCSP) record.
        ssl_stapling on;
        ssl_stapling_verify on;
        ssl_dhparam /etc/ssl/certs/dhparam.pem;
        resolver 8.8.4.4 8.8.8.8 valid=300s;
        resolver_timeout 10s;

        # Enable HSTS
        add_header Strict-Transport-Security max-age=63072000;

        # Do not allow this site to be displayed in iframes
        add_header X-Frame-Options DENY;

        # Do not permit Content-Type sniffing.
        add_header X-Content-Type-Options nosniff;

        # Enable GZip
        gzip on;
        gzip_comp_level 2;
        gzip_http_version 1.0;
        gzip_proxied any;
        gzip_min_length 1100;
        gzip_buffers 16 8k;
        gzip_types text/plain text/css application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml;

        location / {
                #root   /var/www/nginx-default;
                #index  index.html index.htm;
                proxy_pass http://127.0.0.1:${conf:sentry};
                proxy_set_header host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
        }

        #error_page  404  /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
                root   /var/www/nginx-default;
        }

}